HTML File



<div class="build-tab-container">
  <div class="section-header">
    <h2>API Submission New <span class="new-badge">New</span></h2>
    <div class="tab-bar">
      <span>Plan</span>
      <span class="active">Build</span>
      <span>Publish</span>
    </div>
  </div>
  <div class="build-controls d-flex align-items-center">
    <button class="btn btn-light btn-download"><i class="bi bi-download"></i> Download</button>
    <button class="btn btn-light btn-expand" (click)="expandAllSections()">
      <i class="bi bi-arrows-angle-expand"></i> Expand All
    </button>
    <div class="search-box ml-auto">
      <input type="text" class="form-control" placeholder="Search">
    </div>
  </div>
  <div class="section-titles mt-3">
    <div class="section-list">
      <div class="section-item" *ngFor="let section of sections; let si = index">
        <div class="d-flex align-items-center section-title-row">
          <span class="section-number">{{si + 1}}</span>
          <span class="section-title" [title]="section.title">
            {{section.title}}
          </span>
          <span class="section-actions ml-2"
                (mouseenter)="hoveredSection=si"
                (mouseleave)="hoveredSection=null">
            <ng-container *ngIf="hoveredSection===si">
              <button class="action-btn" (click)="onAddDocument()" title="Add Document"><i class="bi bi-file-earmark-plus"></i></button>
              <div class="action-btn text-action-menu" [matMenuTriggerFor]="addTextMenu" title="Add Text">
                <img src="assets/icons/text-add.png" class="icon-add-text" alt="Add Text" width="22" height="22" />
              </div>
              <button class="action-btn" title="Comments"><i class="bi bi-chat-dots"></i></button>
              <mat-menu #addTextMenu="matMenu">
                <button mat-menu-item (click)="onAddText('new')">New</button>
                <button mat-menu-item (click)="onAddText('existing')">Existing</button>
              </mat-menu>
            </ng-container>
          </span>
        </div>
        <div class="section-files" *ngIf="section.files">
          <div class="file-row" *ngFor="let file of section.files"
               (mouseenter)="hoveredFile=file"
               (mouseleave)="hoveredFile=null">
            <span class="file-icon"><i class="bi bi-file-earmark-pdf"></i></span>
            <span class="file-name">{{file.name}}</span>
            <span class="file-action-menu" *ngIf="hoveredFile===file">
              <button class="action-btn" (click)="onFileAction('preview', file)">Preview</button>
              <button class="action-btn" (click)="onFileAction('open', file)">Open</button>
              <button class="action-btn" (click)="onFileAction('properties', file)">Properties</button>
              <button class="action-btn" (click)="onFileAction('download', file)">Download</button>
              <button class="action-btn" (click)="onFileAction('delete', file)">Delete</button>
            </span>
          </div>
        </div>
        <div class="added-text-row"
             (mouseenter)="hoveredText=si"
             (mouseleave)="hoveredText=null">
          <span class="added-text-label">Text</span>
          <ng-container *ngIf="hoveredText===si">
            <span class="text-action-menu">
              <button class="action-btn" (click)="onTextAction('preview', section)">Preview</button>
              <button class="action-btn" (click)="onTextAction('open', section)">Open</button>
              <button class="action-btn" (click)="onTextAction('properties', section)">Properties</button>
              <button class="action-btn" (click)="onTextAction('rename', section)">Rename</button>
              <button class="action-btn" (click)="onTextAction('delete', section)">Delete</button>
            </span>
          </ng-container>
        </div>
        <!-- Recursively render children if any -->
        <div class="section-children" *ngIf="section.children">
          <div class="section-item" *ngFor="let child of section.children">
            <!-- Repeat section logic for children -->
            <span class="section-title">{{child.title}}</span>
            <!-- ...repeat action logic as above... -->
          </div>
        </div>
      </div>
    </div>
  </div>
  <app-add-text-modal *ngIf="showAddTextModal" (close)="showAddTextModal=false"></app-add-text-modal>
</div>




CSS File

.build-tab-container {
  padding: 20px 10px;
  background: #f8fafd;
  min-height: 100vh;
}
.section-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.section-header h2 {
  font-weight: 700;
  font-size: 1.3rem;
}
.new-badge {
  background: #111;
  color: #fff;
  font-size: 0.7rem;
  border-radius: 6px;
  padding: 2px 7px;
  margin-left: 8px;
  vertical-align: super;
}
.tab-bar {
  display: flex;
  gap: 28px;
  font-size: 1rem;
}
.tab-bar span {
  padding: 5px 12px;
  cursor: pointer;
  color: #888;
}
.tab-bar .active {
  border-bottom: 2px solid #222;
  color: #222;
  font-weight: 600;
}
.build-controls {
  gap: 12px;
  margin-top: 16px;
}
.btn-download, .btn-expand {
  font-size: 0.97rem;
  border-radius: 4px;
  border: none;
  background: #e9ecef;
  margin-right: 10px;
}
.search-box {
  min-width: 220px;
}
.section-titles {
  background: #fff;
  border-radius: 8px;
  padding: 16px 24px;
  margin-top: 18px;
  box-shadow: 0 1px 8px rgba(20,30,70,0.04);
}
.section-list {
  display: flex;
  flex-direction: column;
  gap: 12px;
}
.section-item {
  padding: 8px 0;
  border-bottom: 1px solid #e0e0e0;
}
.section-title-row {
  display: flex;
  align-items: center;
  gap: 5px;
}
.section-number {
  margin-right: 8px;
  font-weight: 600;
  color: #3a7afe;
}
.section-title {
  flex: 1;
  word-break: break-all;
  font-weight: 500;
}
.section-actions {
  display: flex;
  gap: 8px;
  align-items: center;
  margin-left: 8px;
}
.action-btn {
  background: none;
  border: none;
  color: #0366d6;
  font-size: 1rem;
  margin: 0 2px;
  cursor: pointer;
  transition: color 0.15s;
  padding: 2px 6px;
}
.action-btn:hover {
  color: #174ea6;
}
.icon-add-text {
  width: 22px;
  height: 22px;
  vertical-align: middle;
}
.section-files {
  margin-left: 26px;
  margin-top: 4px;
}
.file-row {
  display: flex;
  align-items: center;
  gap: 8px;
  margin-bottom: 3px;
}
.file-icon {
  color: #e53f3f;
}
.file-name {
  font-size: 0.96rem;
}
.file-action-menu {
  margin-left: 8px;
  display: flex;
  gap: 4px;
}
.added-text-row {
  margin-left: 26px;
  display: flex;
  align-items: center;
  gap: 8px;
  margin-top: 3px;
}
.added-text-label {
  font-weight: 500;
  color: #d97706;
}
.text-action-menu {
  display: flex;
  gap: 4px;
}
.section-children {
  margin-left: 26px;
  margin-top: 6px;
}
@media (max-width: 900px) {
  .section-titles {
    padding: 9px 5px;
  }
  .section-header {
    flex-direction: column;
    align-items: flex-start;
    gap: 6px;
  }
}
@media (max-width: 600px) {
  .build-tab-container {
    padding: 6px 1px;
  }
  .section-titles {
    font-size: 0.95rem;
  }
  .section-title {
    font-size: 0.93rem;
  }
}


TS File

import { Component } from '@angular/core';

@Component({
  selector: 'app-build-tab',
  templateUrl: './build-tab.component.html',
  styleUrls: ['./build-tab.component.css']
})
export class BuildTabComponent {
  sections = [
    {
      title: 'Medical Device User Fee Cover Sheet Fee Cover Sheet',
      children: [
        {
          title: 'CDRH Premarket Review Submission Review Submission Cover Sheet Truthful and Accuracy Statement Class III Summary and Certification Financial Certification or Disclosure Statement',
          children: []
        },
        {
          title: '510(k) Cover Letter',
          files: [
            { name: '510(k) Cover Letter.pdf', type: 'pdf' }
          ]
        },
        {
          title: 'Financial Certification or Disclocation or Disclosure Statement.pdf',
          files: []
        }
      ]
    }
    // ...other sections
  ];

  isExpandedAll = false;

  expandAllSections() {
    this.isExpandedAll = !this.isExpandedAll;
    // Expand/collapse logic
  }

  onFileAction(action: string, file: any) {
    // Handle file action (preview, open, properties, download, delete)
  }

  onTextAction(action: string, text: any) {
    // Handle text actions (preview, open, properties, rename, delete)
  }

  onAddText(option: 'new' | 'existing') {
    if (option === 'new') {
      // Open editor modal for new text
    } else {
      // Logic for existing text
    }
  }

  onAddDocument() {
    // Logic to add document
  }
}








add-text.modal.component.html



<div class="modal-overlay">
  <div class="modal-content">
    <div class="modal-header">
      <h4>Add Text</h4>
      <button class="btn btn-close" (click)="close.emit()">&times;</button>
    </div>
    <div class="modal-body">
      <div class="editor-toolbar">
        <!-- Example toolbar, replace with your editor's toolbar -->
        <button><b>B</b></button>
        <button><i>I</i></button>
        <button><u>U</u></button>
        <!-- More toolbar buttons as needed -->
      </div>
      <textarea [(ngModel)]="textValue" rows="10" class="form-control" placeholder="Enter text here"></textarea>
    </div>
    <div class="modal-footer">
      <button class="btn btn-light" (click)="close.emit()">Cancel</button>
      <button class="btn btn-primary" (click)="onSave()">Save</button>
    </div>
  </div>
</div>



add-text.modal.component.css

.modal-overlay {
  position: fixed;
  top: 0; left: 0;
  width: 100vw; height: 100vh;
  background: rgba(0,0,0,0.13);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2000;
}
.modal-content {
  background: #fff;
  border-radius: 6px;
  max-width: 700px;
  width: 98vw;
  box-shadow: 0 3px 24px rgba(30,40,75,0.16);
  padding: 0;
  overflow: hidden;
}
.modal-header {
  background: #f2f4f8;
  padding: 14px 18px;
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.modal-header h4 {
  margin: 0;
  font-size: 1.17rem;
}
.btn-close {
  background: none;
  border: none;
  font-size: 1.5rem;
  color: #888;
}
.modal-body {
  padding: 18px;
}
.editor-toolbar {
  display: flex;
  gap: 10px;
  margin-bottom: 8px;
}
textarea.form-control {
  width: 100%;
  min-height: 180px;
  font-size: 1rem;
  border: 1px solid #d4d6db;
  border-radius: 4px;
  padding: 8px;
  resize: vertical;
}
.modal-footer {
  background: #f9fafb;
  padding: 12px 18px;
  display: flex;
  justify-content: flex-end;
  gap: 12px;
}
.btn-primary {
  background: #0096a7;
  color: #fff;
  border: none;
  border-radius: 4px;
  padding: 7px 18px;
}
.btn-primary:hover {
  background: #007d8a;
}
.btn-light {
  background: #eaecef;
  color: #222;
  border: none;
  border-radius: 4px;
  padding: 7px 16px;
}



add-text.modal.component.ts


import { Component, EventEmitter, Output } from '@angular/core';

@Component({
  selector: 'app-add-text-modal',
  templateUrl: './add-text-modal.component.html',
  styleUrls: ['./add-text-modal.component.css']
})
export class AddTextModalComponent {
  @Output() close = new EventEmitter<void>();
  textValue = '';

  onSave() {
    // Save logic here
    this.close.emit();
  }
}




Notes:

The HTML and CSS use Bootstrap and a custom responsive Box Model.
The toolbar in the modal is for illustration; replace with a real WYSIWYG editor as needed.
The text add icon (text-add.png) matches Image 3.
The structure, actions, and menus follow your screenshots and requirements for responsiveness and accessibility.
For Angular Material menus, add the proper imports/modules as needed, or replace with Bootstrap dropdowns if preferred.
